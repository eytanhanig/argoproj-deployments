argo-cd:
  ## ArgoCD configuration
  ## Ref: https://github.com/argoproj/argo-cd
  ##
  # nameOverride: argocd
  # fullnameOverride: ""

  # Optional CRD installation for those without Helm hooks
  # default is true, set to false for Helm 3
  installCRDs: true

  # global:
  #   image:
  #     repository: argoproj/argocd
  #     tag: v1.4.2
  #     imagePullPolicy: IfNotPresent
  #   securityContext: {}
  #   #  runAsUser: 999
  #   #  runAsGroup: 999
  #   #  fsGroup: 999

  # ## Controller
  # controller:
  #   name: application-controller

  #   image:
  #     repository: # argoproj/argocd
  #     tag: # v1.4.2
  #     imagePullPolicy: # IfNotPresent

  #   ## Argo controller commandline flags
  #   args:
  #     statusProcessors: "20"
  #     operationProcessors: "10"

  #   ## Argo controller log level
  #   logLevel: info

  #   ## Additional command line arguments to pass to argocd-controller
  #   ## key: value
  #   extraArgs: {}

  #   ## Environment variables to pass to argocd-controller
  #   ##
  #   env: []

  #   ## Annotations to be added to controller pods
  #   ##
  #   podAnnotations: {}

  #   ## Labels to be added to controller pods
  #   ##
  #   podLabels: {}

  #   ## Labels to set container specific security contexts
  #   containerSecurityContext: {}
  #     # capabilities:
  #     #   drop:
  #     #     - all

  #   ## Configures the controller port
  #   containerPort: 8082

  #   ## Readiness and liveness probes for default backend
  #   ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  #   ##
  #   readinessProbe:
  #     failureThreshold: 3
  #     initialDelaySeconds: 10
  #     periodSeconds: 10
  #     successThreshold: 1
  #     timeoutSeconds: 1
  #   livenessProbe:
  #     failureThreshold: 3
  #     initialDelaySeconds: 10
  #     periodSeconds: 10
  #     successThreshold: 1
  #     timeoutSeconds: 1

  #   ## Additional volumeMounts to the controller main container.
  #   volumeMounts: []

  #   ## Additional volumes to the controller pod.
  #   volumes: []

  #   ## Controller service configuration
  #   service:
  #     annotations: {}
  #     labels: {}
  #     port: 8082
  #     portName: https-controller

  #   ## Node selectors and tolerations for server scheduling to nodes with taints
  #   ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  #   ##
  #   nodeSelector: {}
  #   tolerations: []
  #   affinity: {}

  #   priorityClassName: ""

  #   resources: {}
  #   #  limits:
  #   #    cpu: 500m
  #   #    memory: 512Mi
  #   #  requests:
  #   #    cpu: 250m
  #   #    memory: 256Mi

  #   serviceAccount:
  #     create: true
  #     name: argocd-application-controller

  #   ## Server metrics controller configuration
  #   metrics:
  #     enabled: false
  #     service:
  #       annotations: {}
  #       labels: {}
  #       servicePort: 8082
  #     serviceMonitor:
  #       enabled: false
  #     #   selector:
  #     #     prometheus: kube-prometheus
  #     #   namespace: monitoring
  #     #   additionalLabels: {}
  #     rules:
  #       enabled: false
  #       spec: []
  #       # - alert: ArgoAppMissing
  #       #   expr: |
  #       #     absent(argocd_app_info)
  #       #   for: 15m
  #       #   labels:
  #       #     severity: critical
  #       #   annotations:
  #       #     summary: "[ArgoCD] No reported applications"
  #       #     description: >
  #       #       ArgoCD has not reported any applications data for the past 15 minutes which
  #       #       means that it must be down or not functioning properly.  This needs to be
  #       #       resolved for this cloud to continue to maintain state.
  #       # - alert: ArgoAppNotSynced
  #       #   expr: |
  #       #     argocd_app_sync_status{sync_status!="Synced"} == 1
  #       #   for: 12h
  #       #   labels:
  #       #     severity: warning
  #       #   annotations:
  #       #     summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
  #       #     description: >
  #       #       The application [{{`{{$labels.name}}`}} has not been synchronized for over
  #       #       12 hours which means that the state of this cloud has drifted away from the
  #       #       state inside Git.
  #     #   selector:
  #     #     prometheus: kube-prometheus
  #     #   namespace: monitoring
  #     #   additionalLabels: {}

  #   ## Enable Admin ClusterRole resources.
  #   ## Enable if you would like to grant rights to ArgoCD to deploy to the local kuberentes cluster.
  #   clusterAdminAccess:
  #     enabled: true

  # ## Dex
  # dex:
  #   enabled: true
  #   name: dex-server

  #   image:
  #     repository: quay.io/dexidp/dex
  #     tag: v2.14.0
  #     imagePullPolicy: IfNotPresent
  #   initImage:
  #     repository:
  #     tag:
  #     imagePullPolicy:

  #   ## Environment variables to pass to the Dex server
  #   ##
  #   env: []

  #   serviceAccount:
  #     create: true
  #     name: argocd-dex-server

  #   ## Additional volumeMounts to the controller main container.
  #   volumeMounts:
  #     - name: static-files
  #       mountPath: /shared

  #   ## Additional volumes to the controller pod.
  #   volumes:
  #     - name: static-files
  #       emptyDir: {}

  #   ## Dex deployment container ports
  #   containerPortHttp: 5556
  #   servicePortHttp: 5556
  #   containerPortGrpc: 5557
  #   servicePortGrpc: 5557

  #   ## Node selectors and tolerations for server scheduling to nodes with taints
  #   ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  #   ##
  #   nodeSelector: {}
  #   tolerations: []
  #   affinity: {}

  #   priorityClassName: ""

  #   ## Labels to set container specific security contexts
  #   containerSecurityContext: {}
  #     # capabilities:
  #     #   drop:
  #     #     - all


  #   resources: {}
  #   #  limits:
  #   #    cpu: 50m
  #   #    memory: 64Mi
  #   #  requests:
  #   #    cpu: 10m
  #   #    memory: 32Mi

  # ## Redis
  # redis:
  #   enabled: true
  #   name: redis

  #   image:
  #     repository: redis
  #     tag: 5.0.3
  #     imagePullPolicy: IfNotPresent

  #   containerPort: 6379
  #   servicePort: 6379

  #   ## Environment variables to pass to the Redis server
  #   ##
  #   env: []

  #   ## Node selectors and tolerations for server scheduling to nodes with taints
  #   ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  #   ##
  #   nodeSelector: {}
  #   tolerations: []
  #   affinity: {}

  #   priorityClassName: ""

  #   ## Labels to set container specific security contexts
  #   containerSecurityContext: {}
  #     # capabilities:
  #     #   drop:
  #     #     - all


  #   resources: {}
  #   #  limits:
  #   #    cpu: 200m
  #   #    memory: 128Mi
  #   #  requests:
  #   #    cpu: 100m
  #   #    memory: 64Mi

  #   volumeMounts: []
  #   volumes: []

  # ## Server
  server:
  #   name: server

  #   replicas: 1

  #   autoscaling:
  #     enabled: false
  #     minReplicas: 1
  #     maxReplicas: 5
  #     targetCPUUtilizationPercentage: 50
  #     targetMemoryUtilizationPercentage: 50

  #   image:
  #     repository: # argoproj/argocd
  #     tag: # v1.4.2
  #     imagePullPolicy: # IfNotPresent

  #   ## Additional command line arguments to pass to argocd-server
  #   ## key: value
  #   extraArgs: {}
  #   #   insecure: true

  #   ## Environment variables to pass to argocd-server
  #   ##
  #   env: []

  #   ## Argo server log level
  #   logLevel: info

  #   ## Annotations to be added to controller pods
  #   ##
  #   podAnnotations: {}

  #   ## Labels to be added to controller pods
  #   ##
  #   podLabels: {}

  #   ## Configures the server port
  #   containerPort: 8080

  #   ## Readiness and liveness probes for default backend
  #   ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  #   ##
  #   readinessProbe:
  #     failureThreshold: 3
  #     initialDelaySeconds: 10
  #     periodSeconds: 10
  #     successThreshold: 1
  #     timeoutSeconds: 1
  #   livenessProbe:
  #     failureThreshold: 3
  #     initialDelaySeconds: 10
  #     periodSeconds: 10
  #     successThreshold: 1
  #     timeoutSeconds: 1

  #   ## Additional volumeMounts to the server main container.
  #   volumeMounts: []

  #   ## Additional volumes to the controller pod.
  #   volumes: []

  #   ## Node selectors and tolerations for server scheduling to nodes with taints
  #   ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  #   ##
  #   nodeSelector: {}
  #   tolerations: []
  #   affinity: {}

  #   priorityClassName: ""

  #   ## Labels to set container specific security contexts
  #   containerSecurityContext: {}
  #     # capabilities:
  #     #   drop:
  #     #     - all

  #   resources: {}
  #   #  limits:
  #   #    cpu: 100m
  #   #    memory: 128Mi
  #   #  requests:
  #   #    cpu: 50m
  #   #    memory: 64Mi

    # ## Certificate configuration
    # certificate:
    #   enabled: false
    #   domain: argocd.internal-beta.com
    #   issuer: {}
    #   additionalHosts: []

    # ## Server service configuration
    # service:
    #   annotations: {}
    #   labels: {}
    #   type: ClusterIP
    #   servicePortHttp: 80
    #   servicePortHttps: 443

    # ## Server metrics service configuration
    # metrics:
    #   enabled: false
    #   service:
    #     annotations: {}
    #     labels: {}
    #     servicePort: 8083
    #   serviceMonitor:
    #     enabled: false
    #   #   selector:
    #   #     prometheus: kube-prometheus
    #   #   namespace: monitoring
    #   #   additionalLabels: {}

    # serviceAccount:
    #   create: true
    #   name: argocd-server

    # ingress:
    #   enabled: false
    #   annotations: {}
    #   labels: {}

    #   ## Argo Ingress.
    #   ## Hostnames must be provided if Ingress is enabled.
    #   ## Secrets must be manually created in the namespace
    #   ##
    #   hosts:
    #     []
    #     # - argocd.example.com
    #   paths:
    #     - /
    #   tls:
    #     []
    #     # - secretName: argocd-example-tls
    #     #   hosts:
    #     #     - argocd.example.com

    # # Create a OpenShift Route with SSL passthrough for UI and CLI
    # # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain
    # # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:
    # # If 'hostname' is an empty string "" OpenShift will create a hostname for you.
    # route:
    #   enabled: false
    #   hostname: ""



    ## ArgoCD config
    ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    config:
      # # Argo CD's externally facing base URL (optional). Required when configuring SSO
      # url: https://argocd.internal-beta.com
      # # Argo CD instance label key
      # application.instanceLabelKey: argocd.argoproj.io/instance
      repositories: |
        - url: git@github.com:OtoAnalytics/infra-manifests
          name: infra-manifests
          sshPrivateKeySecret:
            name: argocd-github
            key: sshPrivateKey
        - url: https://github.com/eytanhanig/argoproj-deployments
          name: argoproj-deployments
        - url: https://github.com/argoproj/argocd-example-apps.git
          name: example-apps
        - type: helm
          url: https://kubernetes-charts.storage.googleapis.com
          name: stable
        - type: helm
          url: https://argoproj.github.io/argo-helm
          name: argo
    # Enables application status badge feature
    statusbadge.enabled: 'true'

    # Enables anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.yaml.
    users.anonymous.enabled: "false"


    # ## ArgoCD rbac config
    # ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
    # rbacConfig:
    #   {}
    #   # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).
    #   # Policy rules are in the form:
    #   #   p, subject, resource, action, object, effect
    #   # Role definitions and bindings are in the form:
    #   #   g, subject, inherited-subject
    #   # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
    #   # policy.csv: |
    #   #   # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'
    #   #   p, my-org:team-alpha, applications, sync, my-project/*, allow
    #   #   # Grant all members of 'my-org:team-beta' admins
    #   #   g, my-org:team-beta, role:admin
    #   # policy.default is the name of the default role which Argo CD will falls back to, when
    #   # authorizing API requests (optional). If omitted or empty, users may be still be able to login,
    #   # but will see no apps, projects, etc...
    #   # policy.default: role:readonly
    #   # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
    #   # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.
    #   # scopes: '[cognito:groups, email]'

    # ## Not well tested and not well supported on release v1.0.0.
    # ## Applications
    # ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
    # additionalApplications: []
    # # - name: guestbook
    # #   namespace: argocd
    # #   additionalLabels: {}
    # #   additionalAnnotations: {}
    # #   project: guestbook
    # #   source:
    # #     repoURL: https://github.com/argoproj/argocd-example-apps.git
    # #     targetRevision: HEAD
    # #     path: guestbook
    # #     directory:
    # #       recurse: true
    # #  destination:
    # #     server: https://kubernetes.default.svc
    # #     namespace: guestbook
    # #   syncPolicy:
    # #     automated:
    # #       prune: false
    # #      selfHeal: false

    ## Projects
    ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
    additionalProjects:
    - name: default
      namespace: argocd
      description: Default Privileges
      sourceRepos:
      - '*'
      destinations:
      - namespace: '*'
        server: https://kubernetes.default.svc
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
    - name: unrestricted
      namespace: argocd
      description: Unlimited Privileges
      sourceRepos:
      - '*'
      destinations:
      - namespace: '*'
        server: '*'
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
    # - name: guestbook
    #   namespace: argocd
    #   additionalLabels: {}
    #   additionalAnnotations: {}
    #   description: Example Project
    #   sourceRepos:
    #   - '*'
    #   destinations:
    #   - namespace: guestbook
    #     server: https://kubernetes.default.svc
    #   clusterResourceWhitelist: []
    #   namespaceResourceBlacklist:
    #   - group: ''
    #     kind: ResourceQuota
    #   - group: ''
    #     kind: LimitRange
    #   - group: ''
    #     kind: NetworkPolicy
    #     orphanedResources: {}
    #     roles: []
    #   orphanedResources: {}
    #   roles: []

    ## Enable Admin ClusterRole resources.
    ## Enable if you would like to grant rights to ArgoCD to deploy to the local kuberentes cluster.
    clusterAdminAccess:
      enabled: true

  ## Repo Server
  # repoServer:
  #   name: repo-server

  #   ## Repo server metrics service configuration
  #   metrics:
  #     enabled: false
  #     service:
  #       annotations: {}
  #       labels: {}
  #       servicePort: 8084
  #     serviceMonitor:
  #       enabled: false
  #     #   selector:
  #     #     prometheus: kube-prometheus
  #     #   namespace: monitoring
  #     #   additionalLabels: {}

  #   ## Repo server service account
  #   ## If create is set to true, make sure to uncomment the name and update the rbac section below
  #   serviceAccount:
  #     create: false
  #     #  name: argocd-repo-server
  #     ## Annotations applied to created service account
  #     annotations: {}

  #   ## Repo server rbac rules
  #   # rbac:
  #   #   - apiGroups:
  #   #     - argoproj.io
  #   #     resources:
  #   #     - applications
  #   #     verbs:
  #   #     - get
  #   #     - list
  #   #     - watch

  ## Argo Configs
  configs:
    # Creates a secret with optional repository credentials
    # repositoryCredentials:
      # sshPrivateKey: |
      #   -----BEGIN OPENSSH PRIVATE KEY-----
      #   MIICXAIBAAKBgQCcmiVJXGUvL8zqWmRRETbCKgFadtjJ9WDQpSwiZzMiktpYBo0NMIICXA
      #   MIICXAIBAAKBgQCcmiVJXGUvL8zqWmRRETbCKgFadtjJ9WDQpSwiZzMiktpYBo0NMIICXA
      #   MIICXAIBAAKBgQCcmiVJXGUvL8zqWmRRETbCKgFadtjJ9WDQpSwiZzMiktpYBo0NMIICXA
      #   MIICXAIBAAKBgQCcmiVJXGUvL8zqWmRRETbCKgFadtjJ9WDQpSwiZzMiktpYBo0NMIICXA
      #   MIICXAIBAAKBgQCcmiVJXGUvL8zqWmRRETbCKgFadtjJ9WDQpSwiZzMiktpYBo0NMIICXA
      #   -----END OPENSSH PRIVATE KEY-----
    secret:
      # createSecret: true

      # Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
      # `htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'`
      argocdServerAdminPassword: $2a$10$vWk4TZ1j8ohTrzicsL/FHeDXEId3q2FoUMS60KWKkGGkmUxYcwu3e
      # Password modification time defaults to current time if not set
      # argocdServerAdminPasswordMtime: "2006-01-02T15:04:05Z"
