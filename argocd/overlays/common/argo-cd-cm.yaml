apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
data:
  # Enables application status badge feature
  statusbadge.enabled: 'true'

  # Enables anonymous user access. The anonymous users get default role permissions specified argocd-rbac-cm.yaml.
  users.anonymous.enabled: "false"

  # the URL for getting chat help, this will typically be your Slack channel for support
  help.chatUrl: 'https://womply.slack.com/kubernetes'
  # the text for getting chat help, defaults to "Chat now!"
  help.chatText: 'Slack Channel (#kubernetes)'

  repositories: |
    - url: https://github.com/eytanhanig/argoproj-deployments
      # passwordSecret:
      #   name: my-secret
      #   key: password
      # usernameSecret:
      #   name: my-secret
      #   key: username
      # sshPrivateKeySecret:
      #   name: my-secret
      #   key: sshPrivateKey
    # - type: helm
    #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
    #   name: istio.io
    # - type: helm
    #   url: https://my-private-chart-repo.internal
    #   name: private-repo
    #   usernameSecret:
    #     name: my-secret
    #     key: username
    #   passwordSecret:
    #     name: my-secret
    #     key: password


  # url: https://cd.apps.argoproj.io
  # configManagementPlugins: |
  #   - name: flux
  #     generate:
  #       command: [sh, -c]
  #       args: ["argocd-flux-plugin . --path $GIT_PATH"]
  # dex.config: |
  #   connectors:
  #   - type: github
  #     id: github
  #     name: GitHub
  #     config:
  #       clientID: fb563b3a8dd7ea52f683
  #       clientSecret: $dex.github.clientSecret




  # resource.customizations: |
  #   cert-manager.io/Certificate:
  #     health.lua: |
  #       hs = {}
  #       if obj.status ~= nil then
  #         if obj.status.conditions ~= nil then
  #           for i, condition in ipairs(obj.status.conditions) do
  #             if condition.type == "Ready" and condition.status == "True" then
  #               hs.status = "Healthy"
  #               hs.message = condition.message
  #               return hs
  #             end
  #           end
  #         end
  #       end

  #       hs.status = "Progressing"
  #       hs.message = "Waiting for certificate"
  #       return hs
  #   cert-manager.io/Issuer:
  #     health.lua: |
  #       hs = {}
  #       if obj.status ~= nil then
  #         if obj.status.conditions ~= nil then
  #           for i, condition in ipairs(obj.status.conditions) do
  #             if condition.type == "Ready" and condition.status == "True" then
  #               hs.status = "Healthy"
  #               hs.message = condition.message
  #               return hs
  #             end
  #           end
  #         end
  #       end

  #       hs.status = "Progressing"
  #       hs.message = "Waiting for certificate"
  #       return hs
